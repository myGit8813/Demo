input{
	file{
		path => "/opt/opscenter/sftp/video/perf/MTS/instance/MTS_api*"
		start_position => "beginning"
		discover_interval => 60
		sincedb_path => "/dev/null"
	}
}
filter{
	if "MTS_api" in [path]{
		mutate{
			gsub => ["message", "\r", "" ]  
		  	split => ["message","|"]
		  	add_field => {"region" => "%{[message][0]}"}
		  	add_field => {"time" => "%{[message][1]}"}
		  	add_field => {"api_num" => "%{[message][2]}"}
		  	convert => {"api_num" => "integer"}
		  	add_field => {"api_times" => "%{[message][3]}"}
		  	convert => {"api_times" => "integer"}
		  	add_field => {"api_failed" => "%{[message][4]}"}
		  	convert => {"api_failed" => "integer"}
		  	add_field => {"api_users" => "%{[message][5]}"}
		}
		ruby{
			init => "require 'date'"
			code => 'event.set("api_success",event.get("api_times").to_i - event.get("api_failed").to_i)
					 event.set("api_rate",event.get("api_success").to_f / event.get("api_times").to_f)
					 event.set("final_rate",event.get("api_rate").round(4))
					 event.set("influx_time",DateTime.strptime(event.get("time"),"%Y%m%d").to_time.to_i*1000)
					'
		}
	}
}
output{
	if "MTS_api" in [path]{
		stdout {
			#codec => rubydebug
		}
		influxdb{
			host => "172.16.0.4"
			port => "8086"
			user => "root"
			db => "video"
			allow_time_override => true
			measurement => "api"
			send_as_tags => ["region"]
			coerce_values => {
				'time' => 'integer'
				'num' => 'integer'
				'rate' => 'float'
				'times' => 'integer'
				'users' => 'integer'
			}
			data_points => {
				"time" => "%{influx_time}"
				"region" => "%{region}"
				 "num" => "%{api_num}"
				 "rate" => "%{final_rate}"
				 "times" => "%{api_times}"
				 "users" => "%{api_users}"
			}
		}
	}
}
