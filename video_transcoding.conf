input{
	file{
		path => "/opt/opscenter/sftp/video/perf/MTS/instance/MTS_transcoding*"
		start_position => "beginning"
		discover_interval => 60
		sincedb_path => "/dev/null"
	}
}
filter{
	if "MTS_transcoding" in [path]{
		mutate{
			gsub => ["message", "\r", "" ]  
		  	split => ["message","|"]
		  	add_field => {"region" => "%{[message][0]}"}
		  	add_field => {"id" => "%{[message][1]}"}
		  	add_field => {"time_str" => "%{[message][2]}"}
		  	add_field => {"single_coding" => "%{[message][3]}"}
		  	add_field => {"tasks" => "%{[message][6]}"}
		  	add_field => {"multi_coding" => "%{[message][7]}"}
		  	add_field => {"success" => "%{[message][9]}"}
		}
		ruby{
			init => "require 'date'"
			code => 'event.set("total_coding",event.get("single_coding").to_i + event.get("multi_coding").to_i)
					 event.set("rate",event.get("success").to_f / event.get("tasks").to_f)
					 event.set("final_rate",event.get("rate").round(4))
					 event.set("influx_time",DateTime.strptime(event.get("time_str"),"%Y%m%d").to_time.to_i*1000)
					'
		}
	}
}
output{
	if "MTS_transcoding" in [path]{
		stdout {
			#codec => rubydebug
		}
		influxdb{
			host => "172.16.0.4"
			port => "8086"
			user => "root"
			db => "video"
			allow_time_override => true
			measurement => "trans_code"
			send_as_tags => ["region","id"]
			coerce_values => {
				'time' => 'integer'
				'num' => 'integer'
				'rate' => 'float'
				'success' => 'integer'
				'times' => 'integer'
			}
			data_points => {
				"time" => "%{influx_time}"
				"region" => "%{region}"
				"id" => "%{id}"
				"num" => "%{tasks}"
				"rate" => "%{final_rate}"
				'success' => "%{success}"
				"times" => "%{total_coding}"
			}
		}
	}
}
